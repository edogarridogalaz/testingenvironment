# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1


orbs:
  artifactory-orb: jfrog/artifactory-orb@1.0.1
  aws-ecr: circleci/aws-ecr@6.15.3
  slack: circleci/slack@4.3.0
  jira: circleci/jira@1.3.1

jobs:
  build-task:
    docker:
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      
      # Refresh Dependencies
      - run: gradle dependencies
      
      # Store Dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run build without tests
      - run: gradle build -x test
      
      # Save the jars
      - persist_to_workspace:
          root: /home/circleci/repo
          paths:
            - build/libs/*.jar
      
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1

      - jira/notify

  test-task:
    docker:
      - image: circleci/openjdk:11-jdk
      
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

      # run tests!
      - run: gradle test jacocoTestReport

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit 
      
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1
      
      - jira/notify

  sonarqube-task:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "sonar scanner"
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1
      - jira/notify
  #
  # Artifactory Tasks
  #
  publish-on-artifactory-develop:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "Artifactory develop"
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1
      - jira/notify

  publish-on-artifactory-release:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "Artifactory release"
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1
      - jira/notify

  publish-on-artifactory-master:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "Artifactory master"
      ###############################
      # no-productive notifications #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*            
          channel: C01PQ27R3N2            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*    
          channel: C01PQ27R3N2           
          template: basic_success_1

      ###############################
      # productive notifications    #
      ###############################
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8      
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8
          template: basic_success_1
      - jira/notify
  #
  # AWS ECR Tasks
  #
  awsecr-develop:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "AWS ECR ${CIRCLE_BRANCH}"

  awsecr-release:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "AWS ECR ${CIRCLE_BRANCH}"
      
  awsecr-master:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "AWS ECR ${CIRCLE_BRANCH}"

  success-notify-develop:    
    docker:
      - image: 'cimg/base:stable'
    steps:
    
      - run: echo "Notificaciones de No Productivas"
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*     
          channel: C01PQ27R3N2           
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*   
          channel: C01PQ27R3N2           
          template: basic_success_1
          
      - run: echo "Notificaciones de Slack Productivas"
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8 
          template: basic_success_1

      - jira/notify

  success-notify-release:    
    docker:
      - image: 'cimg/base:stable'
    steps:
    
      - run: echo "Notificaciones de No Productivas"
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*     
          channel: C01PQ27R3N2           
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*   
          channel: C01PQ27R3N2           
          template: basic_success_1
          
      - run: echo "Notificaciones de Slack Productivas"
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8 
          template: basic_success_1

      - jira/notify

  success-notify-master:    
    docker:
      - image: 'cimg/base:stable'
    steps:
    
      - run: echo "Notificaciones de No Productivas"
      - slack/notify:
          event: fail
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*     
          channel: C01PQ27R3N2           
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: feature\/.*|develop|hotfix\/.*|release\/.*   
          channel: C01PQ27R3N2           
          template: basic_success_1
          
      - run: echo "Notificaciones de Slack Productivas"
      - slack/notify:
          event: fail
          branch_pattern: master
          channel: C01QKTYGUL8            
          template: basic_fail_1
      - slack/notify:
          event: pass
          branch_pattern: master
          channel: C01QKTYGUL8 
          template: basic_success_1

      - jira/notify  

#####################################
#              WORKFLOWS            #
#####################################
workflows:
  build_and_test:
    jobs:
      ###############################################
      #                   Base Jobs                 #
      ###############################################
      - build-task:
          post-steps:
              - jira/notify:
                  job_type: deployment
                  environment_type: development

      - test-task:
          requires:
              - build-task
          post-steps:
              - jira/notify:
                  job_type: build
                  environment_type: testing
          
      - sonarqube-task:
          requires:
              - test-task
          post-steps:
              - jira/notify:
                  job_type: build
                  environment_type: testing 
      


      ###############################################
      # publish and docker image for develop branch #
      ###############################################
      - publish-on-artifactory-develop:
          requires:
              - sonarqube-task
          filters:
              branches:
                only: /develop/

      - awsecr-develop:
          requires:
            - publish-on-artifactory-develop
          filters:
            branches:
              only: /develop/
              
      - success-notify-develop:
          requires:
            - awsecr-develop   
          post-steps:
              - jira/notify:
                  job_type: deployment
                  environment_type: production
          filters:
              branches:
                only: /develop/

      ###############################################
      # publish and docker image for Release branch #
      ###############################################
      - publish-on-artifactory-release:
          requires:
              - sonarqube-task
          filters:
              branches:
                only: /release\/.*/

      - awsecr-release:
          requires:
            - publish-on-artifactory-release
          filters:
              branches:
                only: /release\/.*/

      - success-notify-release:
          requires:
            - awsecr-release          
          post-steps:
              - jira/notify:
                  job_type: deployment
                  environment_type: production
          filters:
              branches:
                only: /release\/.*/
                
                

      ##############################################
      # publish and docker image for Master branch #
      ##############################################
      - slack/on-hold:
          filters:
              branches:
                only: /master/
          requires:
              - sonarqube-task

      - approve-deploy:
          type: approval
          requires:
              - sonarqube-task
              - slack/on-hold
          filters:
              branches:
                only: /master/

      - publish-on-artifactory-master:
          requires:
              - approve-deploy
          filters:
              branches:
                only: /master/

      - awsecr-master:
          requires:
              - publish-on-artifactory-master
          filters:
              branches:
                only: /master/

      - success-notify-master:
          requires:
              - awsecr-master            
          post-steps:
              - jira/notify:
                  job_type: deployment
                  environment_type: production
          filters:
              branches:
                only: /master/
      